{{Switch over to the google slides screen}}

We'll learn how to

+ Authenticate a user
+ Vaidate that a user owns a given wallet (like for Joining some NFT discords)
+ Sended a signed message
+ send eth over the blockchain to another wallet

Here are the tools involved in this:

React: https://reactjs.org/
MetaMask: https://metamask.io/
Ethers: https://docs.ethers.io/v5/ //
Web3: https://web3js.readthedocs.io/en/v1.5.2/ // older alternative to ethers - more popular currently
Etherscan: https://ropsten.etherscan.io/
Faucet: https://faucet.ropsten.be/
Eth Converter: https://eth-converter.com/ // Just for converting units

+ React/JS
+ MetaMask wallet
  - knows how to
    => Query the Blockchain
    => Write to the Blockchain
    => Interact with Contracts (call methods of on chain programs)
    => Listen to current Events on chain (e.g call a handler method when any transfer occours)
    => Query historical events
    => Sign messages
    => keeps the users private key secret and manages access to the public key and other info like account balances
    => a pretty good UI for the user to inteact with like a bank account, confirm tx, authorize info access and so on
+ Etherscan so we can search tx on the chain and make sure that we have built worked
+ Ethers JS (a newer alternative to the web3js library you may have heard of)
+ Faucet so we can add fake internet money to our account
+ Ethereum and test networks (specifically Rostpen test network)

{{Switch over to the code screen}}

Metamask is going to do a lot of the heavy lifting for us to day. Given that it is installed we are going to be able to do all of our tasks with really only a few lines of JS code.

An important job that metamask performs is publishing an object onto the window called 'ethereum'. All of the Crypto operations go through this object. Libraries like Web3js or Ethers (which we will use today) wrap this 'ethereum' object and enrich its functionality with their own logic. The wrapped ethereum object is called a web3 `Provider` and you can think of it as your gateway to the blockchain.

To understand what is unusual about web3 from a ui pov is that we're going to get all of this done without any central server - most of this is actually done between our JS and Metamasj - both of which are on the client. When we do an actual tx it goes our to the Blockchain which is an external server/db but it if course is a distributed one.

Ok lets dive into some code and get started with Auth/Connecting a wallet

//////////////////

1. show them the ui & explain each input - if it makes sense show them metamask
2. show them the code - show the jsx, handler, & hero method with console.log
3. walk through each line with explanation
4. show the working version and step thru some examples

///////////////////




We're going to demo this using a really simple react app, the metamask wallet installed via a chrome extension, and ethers js which we will use to interact with Ethereum.

However its worth noting that we are not even going to do a blockchain operation until the end of the demo when we actually send some $Eth on chain. Up until that point everything is achieved with Metamask and simple cryptographic operations.

All of this can be validated anywhere - like on a server - with only publically availabe info (Public Key/Wallet Address & Signature)

+ 1st check to see if a user has the crytpto currency wallet installed
+ Next check to see if we have the user's permission to access the wallet
  - This will trigger a ui event in the wallet on the user's side
  - Unless of course the user has already granted permission in which case ther
  is no need for the wallet to ask as this url has been whitelisted
+ Now it is the 1st time we are going to use our library ethers that will handle all
of our interactions with the blockchain
+ 1st of we need to get a 'provider'
  - This is the object that meta mask exposes to the browser at the window.ethereum address we saw before. However in this case it is also wrapped by Ethers which is how the library provides all of its own functionality.
+ Next we get what is called the signer by calling the getSigner method of the provider
  - in a way what we're doing here is getting the user/signing ability from the wallet. We're going to use this to sign our message
  - its important to note the wallet never surrenders the private key - it only accepts the message we want sign and then internally uses the private key to sign it.
  - thru the magick of private/public key cryptography without ever knowing the private key we can verify that:
    => A user with the private key corresponding to the public key signed the message - I can't tell what the private key is - I can't work backwards to it from the public key (very very hard) but I CAN (very easily) know that a user with THIS and only THIS public key DID sign with their private key. This uni-directionality is why its called asymetric cryptography. This is actually a much broader topic than just crypto.
    => I can also tell that they signed this specific message - that it has not been changed even by a single character.
    => And we can do all of this with the message, the signature & the public key of the signer - nothing else is needed. Except for Math.
+ Next we need to ask the signer to actually sign the message
  - wallet internally accepts the message we have passed here
  - wallet signs the message with the private key
  - wallet returns only the signature which is a hashed version of the message that has been transformed by the private key in such a way that anyone with the public key can verify the message that was passed in and that the person with the public key (show wallet here) signed it
+ In fact lets just get the signer public key / address b/c we need this later in our example when we validate the message
+ Then we just return the message, signature, and address to our simple react app
+ Lets see how it works
  - Here we
  - mm asks us to sign the message
  - you are not interacting with the blockchain no gas fees - just a cryptographic operation
  -
